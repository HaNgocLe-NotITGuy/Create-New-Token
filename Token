// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ZamaDoge is ERC20, Ownable {
    uint256 public taxPercent = 5;
    address public taxWallet;
    mapping(address => bool) private _isExcludedFromFee;

    constructor(address _taxWallet) ERC20("Zama Doge", "ZDOGE") {
        _mint(msg.sender, 100_000_000_000 * 10 ** decimals());
        taxWallet = _taxWallet;
        _isExcludedFromFee[msg.sender] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[taxWallet] = true;
    }

    function excludeFromFee(address account, bool excluded) external onlyOwner {
        _isExcludedFromFee[account] = excluded;
    }

    function setTaxPercent(uint256 newTax) external onlyOwner {
        require(newTax <= 10, "tax too high");
        taxPercent = newTax;
    }

    function setTaxWallet(address newWallet) external onlyOwner {
        taxWallet = newWallet;
    }

    function _transfer(address from, address to, uint256 amount) internal virtual override {
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || taxPercent == 0) {
            super._transfer(from, to, amount);
        } else {
            uint256 taxAmount = amount * taxPercent / 100;
            uint256 sendAmount = amount - taxAmount;
            super._transfer(from, taxWallet, taxAmount);
            super._transfer(from, to, sendAmount);
        }
    }
}
